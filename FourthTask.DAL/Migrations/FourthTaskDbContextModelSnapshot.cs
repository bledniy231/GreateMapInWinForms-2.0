// <auto-generated />
using FourthTask.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FourthTask.DAL.Migrations
{
    [DbContext(typeof(FourthTaskDbContext))]
    partial class FourthTaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FourthTask")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FourthTask.DAL.Domain.Area", b =>
                {
                    b.Property<long>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AreaId"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AreaId");

                    b.HasIndex("AreaName")
                        .IsUnique();

                    b.ToTable("Areas", "FourthTask");

                    b.HasData(
                        new
                        {
                            AreaId = 1L,
                            AreaName = "Area 1"
                        });
                });

            modelBuilder.Entity("FourthTask.DAL.Domain.AreaCoordinate", b =>
                {
                    b.Property<long>("AreaId")
                        .HasColumnType("bigint");

                    b.Property<long>("AreaCoordinateId")
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("AreaId", "AreaCoordinateId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("AreaId", "AreaCoordinateId"));

                    b.ToTable("AreasCoordinates", "FourthTask");

                    b.HasData(
                        new
                        {
                            AreaId = 1L,
                            AreaCoordinateId = 1L,
                            Latitude = 55.160594029458032,
                            Longitude = 61.388364441936567
                        },
                        new
                        {
                            AreaId = 1L,
                            AreaCoordinateId = 2L,
                            Latitude = 55.161587503740748,
                            Longitude = 61.393122292291253
                        },
                        new
                        {
                            AreaId = 1L,
                            AreaCoordinateId = 3L,
                            Latitude = 55.158790849924642,
                            Longitude = 61.391890341658154
                        });
                });

            modelBuilder.Entity("FourthTask.DAL.Domain.MarkerCoordinate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PointName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PointName")
                        .IsUnique();

                    b.ToTable("MarkersCoordinates", "FourthTask");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Latitude = 55.160503714821843,
                            Longitude = 61.370177583057185,
                            PointName = "SUSU"
                        },
                        new
                        {
                            Id = 2L,
                            Latitude = 55.166862645697776,
                            Longitude = 61.40195476957598,
                            PointName = "Chelyabinsk State Academic Opera and Ballet Theater"
                        },
                        new
                        {
                            Id = 3L,
                            Latitude = 55.16834771226128,
                            Longitude = 61.398008203174214,
                            PointName = "Chelyabinsk State Museum of Local Lore"
                        },
                        new
                        {
                            Id = 4L,
                            Latitude = 55.156242835103313,
                            Longitude = 61.402826352874968,
                            PointName = "Chelyabinsk State Academic Drama Theater"
                        },
                        new
                        {
                            Id = 5L,
                            Latitude = 55.162534668869498,
                            Longitude = 61.391016876126002,
                            PointName = "Turbo plane"
                        });
                });

            modelBuilder.Entity("FourthTask.DAL.Domain.AreaCoordinate", b =>
                {
                    b.HasOne("FourthTask.DAL.Domain.Area", "Area")
                        .WithMany("AreaCoordiantes")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("FourthTask.DAL.Domain.Area", b =>
                {
                    b.Navigation("AreaCoordiantes");
                });
#pragma warning restore 612, 618
        }
    }
}
